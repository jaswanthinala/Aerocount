import cv2
import numpy as np
from ultralytics import YOLO
import time
import noti

# Load YOLOv8 model (for body detection)
model = YOLO("yolov8n.pt")  # Use 'yolov8n.pt' or a fine-tuned head detection model

# Load Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Initialize Camera Feed
cap = cv2.VideoCapture(r'C:\Users\jaswa\OneDrive\Desktop\demo\v.mp4')  # Replace with actual video stream

# Parameters
threshold = 0.3  # Lower confidence for better detection
iou_threshold = 0.45  # IoU threshold for overlapping detections
area_of_interest = 100  # Area covered by camera in sq. ft.
avg_space_per_person = 2  # Each person occupies approx. 2 sq. ft.

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break
    
    # Convert frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Run YOLOv8 inference on the frame
    results = model(frame, conf=threshold, iou=iou_threshold)
    
    person_count = 0
    detected_boxes = []

    for result in results:
        boxes = result.boxes
        for box in boxes:
            cls = int(box.cls)
            label = model.names[cls]
            
            # Detect persons (YOLO body detection)
            if label == "person":
                person_count += 1
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                detected_boxes.append((x1, y1, x2, y2))

                # Draw bounding box (optional)
                cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    # Run face detection (if people were missed)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=4, minSize=(30, 30))

    for (fx, fy, fw, fh) in faces:
        face_center = (fx + fw // 2, fy + fh // 2)
        
        # Check if the face is inside an existing person bounding box
        inside_box = any(x1 < face_center[0] < x2 and y1 < face_center[1] < y2 for (x1, y1, x2, y2) in detected_boxes)

        if not inside_box:  # If face is not counted already
            person_count += 1
            cv2.rectangle(frame, (fx, fy), (fx + fw, fy + fh), (255, 0, 0), 2)  # Draw face box

    # Calculate estimated occupied area
    calculated_area = person_count * avg_space_per_person
    ratio = calculated_area / area_of_interest

    # Define zone colors and alert levels
    if ratio < 1:
        zone = "Green"
        color = (0, 255, 0)
        
    elif 1 <= ratio <= 1.5:
        zone = "Yellow"
        color = (0, 255, 255)
        noti.send_whatsapp_message()

    else:
        zone = "Red"
        color = (0, 0, 255)

    # Display the person count and zone on the frame
    cv2.putText(frame, f"People Count: {person_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.putText(frame, f"Density Ratio: {ratio:.2f} ({zone} Zone)", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    # Display the frame
    cv2.imshow("Crowd Management", frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
