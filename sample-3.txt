import cv2
import numpy as np
from ultralytics import YOLO
import time
import noti

# Load YOLOv8 model
model = YOLO("yolov8x.pt")  # Use an extra-large model for better accuracy

# Initialize Camera Feed
cap = cv2.VideoCapture(r'C:\Users\jaswa\OneDrive\Desktop\demo\v.mp4')  # Replace with actual video stream from drone

# Parameters
threshold = 0.4  # Confidence threshold for YOLO
area_of_interest = 100  # Actual area covered by camera in sq. ft.
avg_space_per_person = 2  # Each person occupies approx. 2 sq. ft.
alert_cooldown = 60  # Cooldown period for alerts (in seconds)
last_alert_time = 0  # Track the last alert time

# Define initial area of interest
area_x1, area_y1 = 100, 100
area_width, area_height = 400, 300
direction = "right"

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture frame.")
        break

    # Update area of interest coordinates to move around
    if direction == "right":
        area_x1 += 5
        if area_x1 + area_width >= frame.shape[1]:
            direction = "up"
    elif direction == "up":
        area_y1 -= 5
        if area_y1 <= 0:
            direction = "left"
    elif direction == "left":
        area_x1 -= 5
        if area_x1 <= 0:
            direction = "down"
    elif direction == "down":
        area_y1 += 5
        if area_y1 + area_height >= frame.shape[0]:
            direction = "right"

    area_x2, area_y2 = area_x1 + area_width, area_y1 + area_height
    cv2.rectangle(frame, (area_x1, area_y1), (area_x2, area_y2), (255, 255, 255), 2)

    # Run YOLOv8 inference on the frame
    results = model(frame, conf=threshold)
    # Count the number of people detected within the area of interest
    person_count = 0

    for result in results:
        boxes = result.boxes
        for box in boxes:
            cls = int(box.cls)  # Class ID
            if model.names[cls] == "person":  # Check if the detected object is a person
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                if area_x1 <= x1 <= area_x2 and area_y1 <= y1 <= area_y2:
                    person_count += 1
                    # Draw bounding box within area of interest
                    cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    # Calculate estimated occupied area
    calculated_area = person_count * avg_space_per_person
    ratio = calculated_area / area_of_interest

    # Define zone colors and alert levels
    if ratio < 1:
        zone = "Green"
        color = (0, 255, 0)
        
    elif 1 <= ratio <= 1.5:
        zone = "Yellow"
        color = (0, 255, 255)  # Yellow
        noti.send_whatsapp_message() # Green

    else:
        zone = "Red"
        color = (0, 0, 255)  # Red

    # Display the person count and zone on the frame
    cv2.putText(frame, f"People: {person_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)
    cv2.putText(frame, f"Density Ratio: {ratio:.2f} ({zone} Zone)", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 2)

    # Display the frame
    cv2.imshow("Crowd Management", frame)

    # Exit on 'q' key press
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release resources
cap.release()
cv2.destroyAllWindows()
